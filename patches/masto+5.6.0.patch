diff --git a/node_modules/masto/dist/index.cjs b/node_modules/masto/dist/index.cjs
index a81cadf..b6e5f92 100644
--- a/node_modules/masto/dist/index.cjs
+++ b/node_modules/masto/dist/index.cjs
@@ -3267,7 +3267,7 @@ let AggregateRepository$1 = class AggregateRepository {
     }
 };
 __decorate([
-    version({ since: '1.1.0', until: '3.0.0' })
+    version({ since: '2.4.1' })
 ], AggregateRepository$1.prototype, "search", null);
 
 var index$2 = /*#__PURE__*/Object.freeze({
@@ -3613,7 +3613,7 @@ class AggregateRepository {
     }
 }
 __decorate([
-    version({ since: '1.1.0', until: '3.0.0' })
+    version({ since: '2.4.1' })
 ], AggregateRepository.prototype, "search", null);
 
 var index$1 = /*#__PURE__*/Object.freeze({
diff --git a/node_modules/masto/dist/index.js b/node_modules/masto/dist/index.js
index 63ef30c..1d97277 100644
--- a/node_modules/masto/dist/index.js
+++ b/node_modules/masto/dist/index.js
@@ -1,9 +1,9 @@
-import { AbortController, Headers, FormData, Request, fetch, Response } from '@mastojs/ponyfills';
-import { lt, gt, gte, SemVer } from 'semver';
-import qs from 'qs';
-import { camelCase, snakeCase } from 'change-case';
-import EventEmitter from 'eventemitter3';
-import WebSocket from 'isomorphic-ws';
+import { AbortController, fetch, FormData, Headers, Request, Response } from '@mastojs/ponyfills'
+import { camelCase, snakeCase } from 'change-case'
+import EventEmitter from 'eventemitter3'
+import WebSocket from 'isomorphic-ws'
+import qs from 'qs'
+import { gt, gte, lt, SemVer } from 'semver'
 
 /**
  * Error object
@@ -3265,7 +3265,7 @@ let AggregateRepository$1 = class AggregateRepository {
     }
 };
 __decorate([
-    version({ since: '1.1.0', until: '3.0.0' })
+    version({ since: '2.4.1' })
 ], AggregateRepository$1.prototype, "search", null);
 
 var index$2 = /*#__PURE__*/Object.freeze({
@@ -3611,7 +3611,7 @@ class AggregateRepository {
     }
 }
 __decorate([
-    version({ since: '1.1.0', until: '3.0.0' })
+    version({ since: '2.4.1' })
 ], AggregateRepository.prototype, "search", null);
 
 var index$1 = /*#__PURE__*/Object.freeze({
@@ -3849,4 +3849,5 @@ const login = (params) => __awaiter(void 0, void 0, void 0, function* () {
     return createClient(Object.assign(Object.assign({}, params), { version: instance.version, streamingApiUrl: instance.urls.streamingApi }));
 });
 
-export { BaseHttp, BaseLogger, HttpNativeImpl, LogLevel, LoggerConsoleImpl, MastoConfig, Paginator, SerializerNativeImpl, WsEventsNativeImpl, WsNativeImpl, createClient, fetchV1Instance, fetchV2Instance, login, index as mastodon };
+export { BaseHttp, BaseLogger, HttpNativeImpl, LogLevel, LoggerConsoleImpl, MastoConfig, Paginator, SerializerNativeImpl, WsEventsNativeImpl, WsNativeImpl, createClient, fetchV1Instance, fetchV2Instance, login, index as mastodon }
+
